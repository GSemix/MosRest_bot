# -*- coding: utf-8 -*-

from aiogram import types
from aiogram.utils import exceptions

from buttons import *
from config_reader import config
from logger import logger

async def errorMessage(bot, message, error):
    await bot.send_message(message.from_user.id, f"<b>–û—à–∏–±–∫–∞:</b> {error}", parse_mode = types.ParseMode.HTML)
    logger.info(getLogWithUsersId(message.from_user.id, '+', "Sending 'errorMessage'"))

async def getCmdStartMessage(bot, message):
    await bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤–µ—Ç, {0.username}!\n–Ø –ø–æ–∫–∞ –Ω–µ –Ω–∞—É—á–∏–ª—Å—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å —Ç–æ–±–æ–π –¥–∏–∞–ª–æ–≥, –Ω–æ –æ—Ç–ª–∏—á–Ω–æ –ø–æ–Ω–∏–º–∞—é <b>–∫–æ–º–∞–Ω–¥—ã</b>:".format(message.from_user), parse_mode=types.ParseMode.HTML)
    await bot.send_message(message.from_user.id, """/parameters -> ‚öôÔ∏è –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º

/search -> üîé –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é

/location -> üìç –†–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ä—è–¥–æ–º

/favorites -> ‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã

/top -> ü•á –¢–æ–ø-10 —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

/selections -> ‚ö°Ô∏è –ü–æ–¥–±–æ—Ä–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤

/random -> üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω

/info -> üìÑ –û –±–æ—Ç–µ""", parse_mode=types.ParseMode.HTML)
    await bot.send_message(message.from_user.id, "üü¶ –≠—Ç–∏ –∫–æ–º–∞–Ω–¥—ã —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –≥–æ–ª—É–±—É—é –∫–Ω–æ–ø–∫—É <b>\"‚â° –ú–µ–Ω—é\"</b>, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ–π –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É —Ç–≤–æ–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.""".format(message.from_user), parse_mode=types.ParseMode.HTML)
    logger.info(getLogWithUsersId(message.from_user.id, '+', "Sending 'getCmdStartMessage'"))

async def blockMessage(bot, message):
    await bot.send_message(message.from_user.id, f"<b>üò® –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º</b>", parse_mode = types.ParseMode.HTML)
    logger.info(getLogWithUsersId(message.from_user.id, '+', "Sending 'blockMessage'"))

async def getCmdParametersMessage(bot, message):
    await bot.send_message(message.from_user.id, "<b>‚úÖ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞', —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –∏—Ö –≤—ã–±–æ—Ä—É</b>", parse_mode=types.ParseMode.HTML,
                           reply_markup=getCmdParametersButtons())
    logger.info(getLogWithUsersId(message.from_user.id, '+', "Sending 'getCmdParametersMessage'"))

async def getCmdAdminMessage(bot, message):
    await bot.send_message(message.from_user.id, "<b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>",
                           reply_markup=getCmdAdminButtons())
    logger.info(getLogWithUsersId(message.from_user.id, '+', "Sending 'getCmdAdminMessage'"))

async def getCmdNoAdminMessage(bot, message):
    await bot.send_message(message.from_user.id, "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
    logger.info(getLogWithUsersId(message.from_user.id, '+', "Sending 'getCmdNoAdminMessage'"))

async def getQuestionBackToRestCardMessage(bot, callback_query, rest_id):
    await bot.send_message(callback_query.from_user.id , "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞?", reply_markup=getQuestionBackToRestCardButtons(callback_query.message.message_id, rest_id))

async def getCmdInfoMessage(bot, message):
    await bot.send_message(message.from_user.id, """
<b>–û –±–æ—Ç–µ:</b> –¥–∞–Ω–Ω—ã–π –±–æ—Ç —Å—Ç–∞–Ω–µ—Ç –í–∞—à–∏–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏ —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ú–æ—Å–∫–≤—ã. –ë–æ—Ç <b>—Å–æ–∑–¥–∞–Ω –Ω–µ –≤ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Ü–µ–ª—è—Ö.</b>\n–í—Å–µ –ø—Ä–∞–≤–∞ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è, –ª–æ–≥–æ—Ç–∏–ø—ã, –º–µ–Ω—é –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –∏—Ö –ø—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª—è–º. –í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –∫–∞–∫–∏—Ö-–ª–∏–±–æ –ø—Ä–µ—Ç–µ–Ω–∑–∏–π, –ø—Ä–æ—Å—å–±–∞ —Å–≤—è–∑–∞—Ç—å—Å—è —Å @digital_platforms_bot
<b>–û —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö:</b> –ú—ã, –∫–æ–º–∞–Ω–¥–∞ IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, –≥–æ—Ç–æ–≤—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ–∑–¥–∞—Ç—å telegram bot'a –¥–ª—è –í–∞—à–µ–≥–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –∏–ª–∏ –ø–æ–¥ –Ω–æ–≤—ã–π start up. –ï—â–µ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —É @digital_platforms_bot
""", parse_mode = types.ParseMode.HTML)
    logger.info(getLogWithUsersId(message.from_user.id, '+', "Sending 'getCmdInfoMessage'"))

async def errorSendingTextMessage(bot, message):
    await bot.send_message(message.from_user.id, "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∑–∞–π–¥–∏—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç")
    logger.info(getLogWithUsersId(message.from_user.id, '+', "Sending 'errorSendingTextMessage'"))

async def errorSendingPhotoMessage(bot, message):
    await bot.send_message(message.from_user.id, "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∑–∞–π–¥–∏—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç")
    logger.info(getLogWithUsersId(message.from_user.id, '+', "Sending 'errorSendingPhotoMessage'"))

async def getSocialMediaMessage(bot, callback_query, social_media, name):
    await bot.send_message(callback_query.from_user.id , f"üì∏ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ '{name}'", reply_markup=getSocialMediaButtons(social_media))

async def successfulyEditedMessage(bot, message):
    await bot.send_message(message.from_user.id, "–£—Å–ø–µ—à–Ω–æ", reply_markup=getSuccessfulyEditedButtons())
    logger.info(getLogWithUsersId(message.from_user.id, '+', "Sending 'successfulyEditedMessage'"))

async def errorEditedMessage(bot, message, error):
    await bot.send_message(message.from_user.id, f"<b>{error}</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª", parse_mode = types.ParseMode.HTML)
    logger.info(getLogWithUsersId(message.from_user.id, '+', "Sending 'errorEditedMessage'"))

async def errorSendingFileMessage(bot, message):
    await bot.send_message(message.from_user.id, "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –∑–∞–π–¥–∏—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç")
    logger.info(getLogWithUsersId(message.from_user.id, '+', "Sending 'errorSendingFileMessage'"))

async def getUsersEditMessage(bot, path, callback_query):
    await callback_query.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç–µ —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ—Ç—É\n<b>–í–∞–∂–Ω–æ! –ï—Å–ª–∏ –≤ —Ñ–∞–π–ª–µ –±—É–¥—É—Ç –ø—Ä–∏—Å—É—Ç—Å–≤–æ–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ id, —Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ –≤—Å–µ–º–∏ –µ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏</b>", parse_mode = types.ParseMode.HTML)
    logger.info(getLogWithUsersId(callback_query.from_user.id, '+', "Sending 'getUsersEditMessage'"))
    await bot.send_document(callback_query.from_user.id, open(path, 'rb'))
    logger.info(getLogWithUsersId(callback_query.from_user.id, '+', f"Sending file {path}"))

async def getBackToAdminPanelMessage(callback_query):
    await callback_query.message.edit_text("<b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", parse_mode = types.ParseMode.HTML)
    await callback_query.message.edit_reply_markup(reply_markup=getCmdAdminButtons())
    logger.info(getLogWithUsersId(callback_query.from_user.id, '+', "Sending 'getBackToAdminPanelMessage'"))

async def getCmdStickerMessage(bot, message, telegram_id):
    await bot.send_sticker(chat_id=message.from_user.id, sticker=telegram_id['telegram_id'])
    logger.info(getLogWithUsersId(message.from_user.id, '+', f"Sending 'getStickerMessage' with sticker with telegram_id = {telegram_id['telegram_id']}"))

async def getRestaurantsTopMessage(bot, message):
    await bot.send_message(message.from_user.id, f"<b>‚úÖ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'ü•á –¢–æ–ø-10 —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, —á—Ç–æ –Ω–∞—à–ª–æ—Å—å</b>", parse_mode = types.ParseMode.HTML, reply_markup=getRestaurantsTopButtons())

async def getRestaurantsMessage(bot, id, rest, promotions):
    try:
        image = open(rest["image"], 'rb')
    except:
        image = open("images/testPhoto.jpeg", 'rb')

    text_content = "üìì <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {}\n\nüìç <b>–ê–¥—Ä–µ—Å:</b> {}".format(rest["name"], rest["address"])

    if rest["average_check"]:
        text_content += "\n\nüí∏ <b>–°—Ä–µ–¥–Ω–∏–π —á–µ–∫:</b> {} —Ä—É–± (–±–µ–∑ –Ω–∞–ø–∏—Ç–∫–æ–≤)".format(rest["average_check"])
    await bot.send_photo(id, image, caption=text_content, parse_mode = types.ParseMode.HTML, reply_markup=getRestaurantsButtons(promotions, rest["url_site"], rest["url_map"], rest["url_menu"], str(id) in rest["favorites"], rest["social_media"], rest["id"]))
    logger.info(getLogWithUsersId(id, '=', f"Get restaurant: {rest['id']}"))
    image.close()

async def getCmdSearchMessage(bot, message):
    await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å: ")

async def getRestaurantsReviewsMessage(bot, id, reviews):
    await bot.send_message(id, "üëÄ <b>–ù–∞—à–ª–∏—Å—å –æ–±–∑–æ—Ä—ã –Ω–∞ —ç—Ç–æ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω.</b>\n–£–∑–Ω–∞–π—Ç–µ –º–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –æ –Ω–µ–º:", parse_mode = types.ParseMode.HTML, reply_markup=getRestaurantsReviewsButtons(reviews))

async def getListOfRestaurantsMessage(bot, message, text):
    await bot.send_message(message.from_user.id, f"<b>‚úÖ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üîé –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, —á—Ç–æ –Ω–∞—à–ª–æ—Å—å</b>", parse_mode = types.ParseMode.HTML, reply_markup=getListOfRestaurantsButtons(text))

async def getSelectionsRestaurantsMessage(bot, message, selections):
    await bot.send_message(message.from_user.id, "‚ö°Ô∏è<b>–ó–¥–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø–æ–¥–±–æ—Ä–∫–∏</b>, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å:", reply_markup=getSelectionsRestaurantsButtons(selections), parse_mode = types.ParseMode.HTML)

async def getRestaurantsPromotionsMessage(bot, callback_query, promotions):
    for promotion in promotions:
        text = ""

        if promotion['description']:
            if 'header' in promotion['description'].keys() and promotion['description']['header']:
                text += f"<b>{promotion['description']['header']}</b>\n\n"
            if 'main_text' in promotion['description'].keys() and promotion['description']['main_text']:
                text += f"<em>{promotion['description']['main_text']}</em>"

        if promotion['media']:
            with open(promotion['media'], 'rb') as image:
                await bot.send_photo(callback_query.from_user.id, image, caption=text, parse_mode = types.ParseMode.HTML, reply_markup=getRestaurantsPromotionsButtons(promotion['url']))
        else:
            if text != "":
                await bot.send_message(callback_query.from_user.id, text, parse_mode = types.ParseMode.HTML, reply_markup=getRestaurantsPromotionsButtons(promotion['url']))

        logger.info(getLogWithUsersId(callback_query.from_user.id, '=', f"Get promotion with id {promotion['id']}"))

async def getRestaurantsCallback(callback_query, id, rest, promotions):
    await callback_query.message.edit_reply_markup(reply_markup=getRestaurantsButtons(promotions, rest["url_site"], rest["url_map"], rest["url_menu"], str(id) in rest["favorites"], rest["social_media"], rest["id"]))

async def getCmdFavoritesMessage(bot, message):
    await bot.send_message(message.from_user.id, "<b>‚úÖ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã ‚≠ê', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç</b>", reply_markup=getCmdFavoritesButtons(message.from_user.id))

async def getCmdEmptyFavoritesMessage(bot, message):
    await bot.send_message(message.from_user.id, "ü§î –•–º, –ø–æ–∫–∞ –∑–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ—Ç")

async def getSelectionMessage(bot, callback_query, selection):
    await bot.send_message(callback_query.from_user.id, f"<b>‚úÖ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üìí {selection['name']}', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥–±–æ—Ä–∫—É</b>", parse_mode = types.ParseMode.HTML, reply_markup=getSelectionButtons(selection))

async def getGooseMessage(bot, id):
    await bot.send_message(message.from_user.id, "–ê –≤–æ—Ç –∏ –≥—É—Å—å!")

async def getNearRestaurantsMessage(bot, message, latitude, longitude):
    await message.answer(f"üó∫ –í–∞—à–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {latitude}, {longitude}\n <b>‚úÖ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üìç –†–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ä—è–¥–æ–º', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç</b>", parse_mode = types.ParseMode.HTML, reply_markup=getNearRestaurantsButtons(latitude, longitude))

async def getHandleParametersMessage(bot, id, kitchen, area):
    await bot.send_message(id, "<b>‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞\n\n</b><b>üçΩ –ö—É—Ö–Ω—è:</b> {}\n<b>üìç–†–∞–π–æ–Ω:</b> {}\n\n<b>‚úÖ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üìã –†–µ—Å—Ç–æ—Ä–∞–Ω—ã', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, —á—Ç–æ –Ω–∞—à–ª–æ—Å—å</b>".format(kitchen, area), parse_mode = types.ParseMode.HTML, reply_markup=getHandleParametersButtons(kitchen, area))

async def getCmdLocationMessage(bot, id):
    await bot.send_message(id, "‚úÖ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'Share Position', —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π", reply_markup=getCmdLocationButtons())

async def getCheckUsersCountMessage(callback_query, count):
    await callback_query.message.edit_text(f"–í—Å–µ–≥–æ: {count}", parse_mode = types.ParseMode.HTML)
    await callback_query.message.edit_reply_markup(reply_markup=getCheckUsersCountButtons())
    logger.info(getLogWithUsersId(callback_query.from_user.id, '+', "Sending 'getCheckUsersCountMessage'"))

async def getLast24HourUsersActivityMessage(callback_query, activity):
    text_content = f"<b>| - –ö–æ–º–∞–Ω–¥—ã - |</b> [–í—Å–µ–≥–æ]: {activity['commands']['all']}\n\n"

    for x in activity['commands'].keys():
        if x != 'all':
            text_content += f"{x} -> {activity['commands'][x]}\n"

    text_content += f"\n<b>| - –†–µ—Å—Ç–æ—Ä–∞–Ω—ã - |</b> [–í—Å–µ–≥–æ]: {activity['restaurants']['all']}\n\n"

    for x in activity['restaurants'].keys():
        if x != 'all':
            text_content += f"{x} -> {activity['restaurants'][x]}\n"

    #text_content += f"\n<b>| - –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - |</b> [–í—Å–µ–≥–æ]: {activity['users']['all']}"

    await callback_query.message.edit_text(text_content, parse_mode = types.ParseMode.HTML)
    await callback_query.message.edit_reply_markup(reply_markup=getLast24HourUsersActivityButtons())
    logger.info(getLogWithUsersId(callback_query.from_user.id, '+', "Sending 'getLast24HourUsersActivityMessage'"))

async def getLastWeekUsersActivityMessage(callback_query, activity):
    text_content = f"<b>| - –ö–æ–º–∞–Ω–¥—ã - |</b> [–í—Å–µ–≥–æ]: {activity['commands']['all']}\n\n"

    for x in activity['commands'].keys():
        if x != 'all':
            text_content += f"{x} -> {activity['commands'][x]}\n"

    text_content += f"\n<b>| - –†–µ—Å—Ç–æ—Ä–∞–Ω—ã - |</b> [–í—Å–µ–≥–æ]: {activity['restaurants']['all']}\n\n"

    for x in activity['restaurants'].keys():
        if x != 'all':
            text_content += f"{x} -> {activity['restaurants'][x]}\n"

    #text_content += f"\n<b>| - –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - |</b> [–í—Å–µ–≥–æ]: {activity['users']['all']}"

    await callback_query.message.edit_text(text_content, parse_mode = types.ParseMode.HTML)
    await callback_query.message.edit_reply_markup(reply_markup=getLastWeekUsersActivityButtons())
    logger.info(getLogWithUsersId(callback_query.from_user.id, '+', "Sending 'getLastWeekUsersActivityMessage'"))

def getLogWithUsersId(id, s, text):
    return f"messages.py : {id} : [{s}] {text}"












